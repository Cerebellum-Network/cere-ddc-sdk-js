// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "dag_api.proto" (package "dag", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message dag.PutRequest
 */
export interface PutRequest {
    /**
     * @generated from protobuf field: uint32 BucketId = 1 [json_name = "BucketId"];
     */
    bucketId: number;
    /**
     * @generated from protobuf field: dag.Node Node = 2 [json_name = "Node"];
     */
    node?: Node;
}
/**
 * @generated from protobuf message dag.PutResponse
 */
export interface PutResponse {
    /**
     * @generated from protobuf field: string Cid = 1 [json_name = "Cid"];
     */
    cid: string;
}
/**
 * @generated from protobuf message dag.GetRequest
 */
export interface GetRequest {
    /**
     * @generated from protobuf field: uint32 BucketId = 1 [json_name = "BucketId"];
     */
    bucketId: number;
    /**
     * @generated from protobuf field: string Cid = 2 [json_name = "Cid"];
     */
    cid: string;
    /**
     * @generated from protobuf field: string Path = 3 [json_name = "Path"];
     */
    path: string;
}
/**
 * @generated from protobuf message dag.GetResponse
 */
export interface GetResponse {
    /**
     * @generated from protobuf field: dag.Node Node = 1 [json_name = "Node"];
     */
    node?: Node;
}
/**
 * @generated from protobuf message dag.Node
 */
export interface Node {
    /**
     * @generated from protobuf field: bytes Data = 1 [json_name = "Data"];
     */
    data: Uint8Array;
    /**
     * @generated from protobuf field: repeated dag.Link Links = 2 [json_name = "Links"];
     */
    links: Link[];
    /**
     * @generated from protobuf field: repeated dag.Tag Tags = 3 [json_name = "Tags"];
     */
    tags: Tag[];
}
/**
 * @generated from protobuf message dag.Link
 */
export interface Link {
    /**
     * CID of the target object
     *
     * @generated from protobuf field: string Cid = 1 [json_name = "Cid"];
     */
    cid: string;
    /**
     * UTF-8 string name
     *
     * @generated from protobuf field: string Name = 2 [json_name = "Name"];
     */
    name: string;
    /**
     * cumulative size of target object
     *
     * @generated from protobuf field: uint64 Size = 3 [json_name = "Size"];
     */
    size: bigint;
}
/**
 * @generated from protobuf message dag.Tag
 */
export interface Tag {
    /**
     * @generated from protobuf field: string Key = 1 [json_name = "Key"];
     */
    key: string;
    /**
     * @generated from protobuf field: string Value = 2 [json_name = "Value"];
     */
    value: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class PutRequest$Type extends MessageType<PutRequest> {
    constructor() {
        super("dag.PutRequest", [
            { no: 1, name: "BucketId", kind: "scalar", jsonName: "BucketId", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "Node", kind: "message", jsonName: "Node", T: () => Node }
        ]);
    }
    create(value?: PartialMessage<PutRequest>): PutRequest {
        const message = { bucketId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PutRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PutRequest): PutRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 BucketId = 1 [json_name = "BucketId"];*/ 1:
                    message.bucketId = reader.uint32();
                    break;
                case /* dag.Node Node = 2 [json_name = "Node"];*/ 2:
                    message.node = Node.internalBinaryRead(reader, reader.uint32(), options, message.node);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PutRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 BucketId = 1 [json_name = "BucketId"]; */
        if (message.bucketId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.bucketId);
        /* dag.Node Node = 2 [json_name = "Node"]; */
        if (message.node)
            Node.internalBinaryWrite(message.node, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dag.PutRequest
 */
export const PutRequest = new PutRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PutResponse$Type extends MessageType<PutResponse> {
    constructor() {
        super("dag.PutResponse", [
            { no: 1, name: "Cid", kind: "scalar", jsonName: "Cid", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PutResponse>): PutResponse {
        const message = { cid: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PutResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PutResponse): PutResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Cid = 1 [json_name = "Cid"];*/ 1:
                    message.cid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PutResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Cid = 1 [json_name = "Cid"]; */
        if (message.cid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dag.PutResponse
 */
export const PutResponse = new PutResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRequest$Type extends MessageType<GetRequest> {
    constructor() {
        super("dag.GetRequest", [
            { no: 1, name: "BucketId", kind: "scalar", jsonName: "BucketId", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "Cid", kind: "scalar", jsonName: "Cid", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Path", kind: "scalar", jsonName: "Path", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetRequest>): GetRequest {
        const message = { bucketId: 0, cid: "", path: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRequest): GetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 BucketId = 1 [json_name = "BucketId"];*/ 1:
                    message.bucketId = reader.uint32();
                    break;
                case /* string Cid = 2 [json_name = "Cid"];*/ 2:
                    message.cid = reader.string();
                    break;
                case /* string Path = 3 [json_name = "Path"];*/ 3:
                    message.path = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 BucketId = 1 [json_name = "BucketId"]; */
        if (message.bucketId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.bucketId);
        /* string Cid = 2 [json_name = "Cid"]; */
        if (message.cid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.cid);
        /* string Path = 3 [json_name = "Path"]; */
        if (message.path !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.path);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dag.GetRequest
 */
export const GetRequest = new GetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetResponse$Type extends MessageType<GetResponse> {
    constructor() {
        super("dag.GetResponse", [
            { no: 1, name: "Node", kind: "message", jsonName: "Node", T: () => Node }
        ]);
    }
    create(value?: PartialMessage<GetResponse>): GetResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetResponse): GetResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* dag.Node Node = 1 [json_name = "Node"];*/ 1:
                    message.node = Node.internalBinaryRead(reader, reader.uint32(), options, message.node);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* dag.Node Node = 1 [json_name = "Node"]; */
        if (message.node)
            Node.internalBinaryWrite(message.node, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dag.GetResponse
 */
export const GetResponse = new GetResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Node$Type extends MessageType<Node> {
    constructor() {
        super("dag.Node", [
            { no: 1, name: "Data", kind: "scalar", jsonName: "Data", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "Links", kind: "message", jsonName: "Links", repeat: 1 /*RepeatType.PACKED*/, T: () => Link },
            { no: 3, name: "Tags", kind: "message", jsonName: "Tags", repeat: 1 /*RepeatType.PACKED*/, T: () => Tag }
        ]);
    }
    create(value?: PartialMessage<Node>): Node {
        const message = { data: new Uint8Array(0), links: [], tags: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Node>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Node): Node {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes Data = 1 [json_name = "Data"];*/ 1:
                    message.data = reader.bytes();
                    break;
                case /* repeated dag.Link Links = 2 [json_name = "Links"];*/ 2:
                    message.links.push(Link.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated dag.Tag Tags = 3 [json_name = "Tags"];*/ 3:
                    message.tags.push(Tag.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Node, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes Data = 1 [json_name = "Data"]; */
        if (message.data.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.data);
        /* repeated dag.Link Links = 2 [json_name = "Links"]; */
        for (let i = 0; i < message.links.length; i++)
            Link.internalBinaryWrite(message.links[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated dag.Tag Tags = 3 [json_name = "Tags"]; */
        for (let i = 0; i < message.tags.length; i++)
            Tag.internalBinaryWrite(message.tags[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dag.Node
 */
export const Node = new Node$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Link$Type extends MessageType<Link> {
    constructor() {
        super("dag.Link", [
            { no: 1, name: "Cid", kind: "scalar", jsonName: "Cid", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "Name", kind: "scalar", jsonName: "Name", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Size", kind: "scalar", jsonName: "Size", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Link>): Link {
        const message = { cid: "", name: "", size: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Link>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Link): Link {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Cid = 1 [json_name = "Cid"];*/ 1:
                    message.cid = reader.string();
                    break;
                case /* string Name = 2 [json_name = "Name"];*/ 2:
                    message.name = reader.string();
                    break;
                case /* uint64 Size = 3 [json_name = "Size"];*/ 3:
                    message.size = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Link, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Cid = 1 [json_name = "Cid"]; */
        if (message.cid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.cid);
        /* string Name = 2 [json_name = "Name"]; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* uint64 Size = 3 [json_name = "Size"]; */
        if (message.size !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.size);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dag.Link
 */
export const Link = new Link$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Tag$Type extends MessageType<Tag> {
    constructor() {
        super("dag.Tag", [
            { no: 1, name: "Key", kind: "scalar", jsonName: "Key", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "Value", kind: "scalar", jsonName: "Value", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Tag>): Tag {
        const message = { key: "", value: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Tag>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Tag): Tag {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Key = 1 [json_name = "Key"];*/ 1:
                    message.key = reader.string();
                    break;
                case /* string Value = 2 [json_name = "Value"];*/ 2:
                    message.value = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Tag, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Key = 1 [json_name = "Key"]; */
        if (message.key !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.key);
        /* string Value = 2 [json_name = "Value"]; */
        if (message.value !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dag.Tag
 */
export const Tag = new Tag$Type();
/**
 * @generated ServiceType for protobuf service dag.DagApi
 */
export const DagApi = new ServiceType("dag.DagApi", [
    { name: "Put", options: { "google.api.http": { post: "/v1/dag/{BucketId}", body: "*" } }, I: PutRequest, O: PutResponse },
    { name: "Get", options: { "google.api.http": { get: "/v1/dag/{BucketId}/{Cid}/{Path}", additionalBindings: [{ get: "/v1/dag/{BucketId}/{Cid}" }] } }, I: GetRequest, O: GetResponse }
]);
