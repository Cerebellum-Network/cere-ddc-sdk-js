/* eslint-disable */
// @generated by protobuf-ts 2.9.1 with parameter long_type_number,generate_dependencies,eslint_disable
// @generated from protobuf file "common/signature.proto" (package "common", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message common.Signature
 */
export interface Signature {
    /**
     * @generated from protobuf field: common.Signature.Algorithm algorithm = 1;
     */
    algorithm: Signature_Algorithm;
    /**
     * @generated from protobuf field: bytes signer = 2;
     */
    signer: Uint8Array;
    /**
     * @generated from protobuf field: bytes value = 3;
     */
    value: Uint8Array;
}
/**
 * @generated from protobuf enum common.Signature.Algorithm
 */
export enum Signature_Algorithm {
    /**
     * @generated from protobuf enum value: ED_25519 = 0;
     */
    ED_25519 = 0,
    /**
     * @generated from protobuf enum value: SR_25519 = 1;
     */
    SR_25519 = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class Signature$Type extends MessageType<Signature> {
    constructor() {
        super("common.Signature", [
            { no: 1, name: "algorithm", kind: "enum", T: () => ["common.Signature.Algorithm", Signature_Algorithm] },
            { no: 2, name: "signer", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "value", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<Signature>): Signature {
        const message = { algorithm: 0, signer: new Uint8Array(0), value: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Signature>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Signature): Signature {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.Signature.Algorithm algorithm */ 1:
                    message.algorithm = reader.int32();
                    break;
                case /* bytes signer */ 2:
                    message.signer = reader.bytes();
                    break;
                case /* bytes value */ 3:
                    message.value = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Signature, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.Signature.Algorithm algorithm = 1; */
        if (message.algorithm !== 0)
            writer.tag(1, WireType.Varint).int32(message.algorithm);
        /* bytes signer = 2; */
        if (message.signer.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.signer);
        /* bytes value = 3; */
        if (message.value.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message common.Signature
 */
export const Signature = new Signature$Type();
