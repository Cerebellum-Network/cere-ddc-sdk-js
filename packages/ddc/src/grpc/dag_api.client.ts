/* eslint-disable */
// @generated by protobuf-ts 2.9.1 with parameter long_type_number,generate_dependencies,eslint_disable
// @generated from protobuf file "dag_api.proto" (package "dag", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { DagApi } from "./dag_api";
import type { GetResponse } from "./dag_api";
import type { GetRequest } from "./dag_api";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { PutResponse } from "./dag_api";
import type { PutRequest } from "./dag_api";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service dag.DagApi
 */
export interface IDagApiClient {
    /**
     * @generated from protobuf rpc: Put(dag.PutRequest) returns (dag.PutResponse);
     */
    put(input: PutRequest, options?: RpcOptions): UnaryCall<PutRequest, PutResponse>;
    /**
     * @generated from protobuf rpc: Get(dag.GetRequest) returns (dag.GetResponse);
     */
    get(input: GetRequest, options?: RpcOptions): UnaryCall<GetRequest, GetResponse>;
}
/**
 * @generated from protobuf service dag.DagApi
 */
export class DagApiClient implements IDagApiClient, ServiceInfo {
    typeName = DagApi.typeName;
    methods = DagApi.methods;
    options = DagApi.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Put(dag.PutRequest) returns (dag.PutResponse);
     */
    put(input: PutRequest, options?: RpcOptions): UnaryCall<PutRequest, PutResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<PutRequest, PutResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Get(dag.GetRequest) returns (dag.GetResponse);
     */
    get(input: GetRequest, options?: RpcOptions): UnaryCall<GetRequest, GetResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetRequest, GetResponse>("unary", this._transport, method, opt, input);
    }
}
