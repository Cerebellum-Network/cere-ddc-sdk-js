/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter long_type_number,generate_dependencies,eslint_disable
// @generated from protobuf file "activity_report/activity_report.proto" (package "activity_report", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Signature } from "../common/signature";
/**
 * @generated from protobuf message activity_report.ActivityRecord
 */
export interface ActivityRecord {
    /**
     * @generated from protobuf field: activity_report.ActivityFulfillment upstream = 1;
     */
    upstream?: ActivityFulfillment;
    /**
     * @generated from protobuf field: repeated activity_report.ActivityFulfillment downstream = 2;
     */
    downstream: ActivityFulfillment[];
    /**
     * @generated from protobuf field: uint64 timestamp = 3;
     */
    timestamp: number;
    /**
     * @generated from protobuf field: common.Signature signature = 10;
     */
    signature?: Signature;
}
/**
 * @generated from protobuf message activity_report.ActivityRequest
 */
export interface ActivityRequest {
    /**
     * @generated from protobuf field: optional activity_report.ActivityRequest parentRequest = 1;
     */
    parentRequest?: ActivityRequest;
    /**
     * @generated from protobuf field: string requestId = 2;
     */
    requestId: string;
    /**
     * @generated from protobuf field: activity_report.ActivityRequest.RequestType requestType = 3;
     */
    requestType: ActivityRequest_RequestType;
    /**
     * @generated from protobuf field: activity_report.ActivityRequest.ContentType contentType = 4;
     */
    contentType: ActivityRequest_ContentType;
    /**
     * @generated from protobuf field: uint64 bucketId = 5 [jstype = JS_NORMAL];
     */
    bucketId: bigint; // set only when content type is PIECE
    /**
     * @generated from protobuf field: bytes id = 6;
     */
    id: Uint8Array; // either cid or segment id or merkle tree root hash
    /**
     * @generated from protobuf field: uint64 offset = 7;
     */
    offset: number; // offset of data requested (set only when RecordType = GET)
    /**
     * @generated from protobuf field: uint64 size = 8;
     */
    size: number; // size of content stored or delivered
    /**
     * @generated from protobuf field: uint64 timestamp = 9;
     */
    timestamp: number;
    /**
     * @generated from protobuf field: common.Signature signature = 10;
     */
    signature?: Signature;
}
/**
 * @generated from protobuf enum activity_report.ActivityRequest.RequestType
 */
export enum ActivityRequest_RequestType {
    /**
     * @generated from protobuf enum value: REQUEST_TYPE_STORE = 0;
     */
    STORE = 0,
    /**
     * @generated from protobuf enum value: REQUEST_TYPE_GET = 1;
     */
    GET = 1
}
/**
 * @generated from protobuf enum activity_report.ActivityRequest.ContentType
 */
export enum ActivityRequest_ContentType {
    /**
     * @generated from protobuf enum value: CONTENT_TYPE_PIECE = 0;
     */
    PIECE = 0,
    /**
     * @generated from protobuf enum value: CONTENT_TYPE_SEGMENT = 1;
     */
    SEGMENT = 1,
    /**
     * @generated from protobuf enum value: CONTENT_TYPE_MERKLE_TREE = 2;
     */
    MERKLE_TREE = 2
}
// we will get this on the server side streaming

/**
 * @generated from protobuf message activity_report.ActivityAcknowledgment
 */
export interface ActivityAcknowledgment {
    /**
     * @generated from protobuf field: string requestId = 1;
     */
    requestId: string;
    /**
     * @generated from protobuf field: uint64 bytesStoredOrDelivered = 2;
     */
    bytesStoredOrDelivered: number;
    /**
     * @generated from protobuf field: uint64 timestamp = 3;
     */
    timestamp: number;
    /**
     * @generated from protobuf field: common.Signature signature = 4;
     */
    signature?: Signature;
}
/**
 * @generated from protobuf message activity_report.ActivityFulfillment
 */
export interface ActivityFulfillment {
    /**
     * @generated from protobuf field: activity_report.ActivityRequest request = 1;
     */
    request?: ActivityRequest;
    /**
     * @generated from protobuf field: optional activity_report.ActivityAcknowledgment ack = 2;
     */
    ack?: ActivityAcknowledgment;
}
// @generated message type with reflection information, may provide speed optimized methods
class ActivityRecord$Type extends MessageType<ActivityRecord> {
    constructor() {
        super("activity_report.ActivityRecord", [
            { no: 1, name: "upstream", kind: "message", T: () => ActivityFulfillment },
            { no: 2, name: "downstream", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ActivityFulfillment },
            { no: 3, name: "timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 10, name: "signature", kind: "message", T: () => Signature }
        ]);
    }
    create(value?: PartialMessage<ActivityRecord>): ActivityRecord {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.downstream = [];
        message.timestamp = 0;
        if (value !== undefined)
            reflectionMergePartial<ActivityRecord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityRecord): ActivityRecord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* activity_report.ActivityFulfillment upstream */ 1:
                    message.upstream = ActivityFulfillment.internalBinaryRead(reader, reader.uint32(), options, message.upstream);
                    break;
                case /* repeated activity_report.ActivityFulfillment downstream */ 2:
                    message.downstream.push(ActivityFulfillment.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint64 timestamp */ 3:
                    message.timestamp = reader.uint64().toNumber();
                    break;
                case /* common.Signature signature */ 10:
                    message.signature = Signature.internalBinaryRead(reader, reader.uint32(), options, message.signature);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* activity_report.ActivityFulfillment upstream = 1; */
        if (message.upstream)
            ActivityFulfillment.internalBinaryWrite(message.upstream, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated activity_report.ActivityFulfillment downstream = 2; */
        for (let i = 0; i < message.downstream.length; i++)
            ActivityFulfillment.internalBinaryWrite(message.downstream[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* uint64 timestamp = 3; */
        if (message.timestamp !== 0)
            writer.tag(3, WireType.Varint).uint64(message.timestamp);
        /* common.Signature signature = 10; */
        if (message.signature)
            Signature.internalBinaryWrite(message.signature, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message activity_report.ActivityRecord
 */
export const ActivityRecord = new ActivityRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityRequest$Type extends MessageType<ActivityRequest> {
    constructor() {
        super("activity_report.ActivityRequest", [
            { no: 1, name: "parentRequest", kind: "message", T: () => ActivityRequest },
            { no: 2, name: "requestId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "requestType", kind: "enum", T: () => ["activity_report.ActivityRequest.RequestType", ActivityRequest_RequestType, "REQUEST_TYPE_"] },
            { no: 4, name: "contentType", kind: "enum", T: () => ["activity_report.ActivityRequest.ContentType", ActivityRequest_ContentType, "CONTENT_TYPE_"] },
            { no: 5, name: "bucketId", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "id", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 7, name: "offset", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 8, name: "size", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 9, name: "timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 10, name: "signature", kind: "message", T: () => Signature }
        ]);
    }
    create(value?: PartialMessage<ActivityRequest>): ActivityRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.requestId = "";
        message.requestType = 0;
        message.contentType = 0;
        message.bucketId = 0n;
        message.id = new Uint8Array(0);
        message.offset = 0;
        message.size = 0;
        message.timestamp = 0;
        if (value !== undefined)
            reflectionMergePartial<ActivityRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityRequest): ActivityRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional activity_report.ActivityRequest parentRequest */ 1:
                    message.parentRequest = ActivityRequest.internalBinaryRead(reader, reader.uint32(), options, message.parentRequest);
                    break;
                case /* string requestId */ 2:
                    message.requestId = reader.string();
                    break;
                case /* activity_report.ActivityRequest.RequestType requestType */ 3:
                    message.requestType = reader.int32();
                    break;
                case /* activity_report.ActivityRequest.ContentType contentType */ 4:
                    message.contentType = reader.int32();
                    break;
                case /* uint64 bucketId = 5 [jstype = JS_NORMAL];*/ 5:
                    message.bucketId = reader.uint64().toBigInt();
                    break;
                case /* bytes id */ 6:
                    message.id = reader.bytes();
                    break;
                case /* uint64 offset */ 7:
                    message.offset = reader.uint64().toNumber();
                    break;
                case /* uint64 size */ 8:
                    message.size = reader.uint64().toNumber();
                    break;
                case /* uint64 timestamp */ 9:
                    message.timestamp = reader.uint64().toNumber();
                    break;
                case /* common.Signature signature */ 10:
                    message.signature = Signature.internalBinaryRead(reader, reader.uint32(), options, message.signature);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional activity_report.ActivityRequest parentRequest = 1; */
        if (message.parentRequest)
            ActivityRequest.internalBinaryWrite(message.parentRequest, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string requestId = 2; */
        if (message.requestId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.requestId);
        /* activity_report.ActivityRequest.RequestType requestType = 3; */
        if (message.requestType !== 0)
            writer.tag(3, WireType.Varint).int32(message.requestType);
        /* activity_report.ActivityRequest.ContentType contentType = 4; */
        if (message.contentType !== 0)
            writer.tag(4, WireType.Varint).int32(message.contentType);
        /* uint64 bucketId = 5 [jstype = JS_NORMAL]; */
        if (message.bucketId !== 0n)
            writer.tag(5, WireType.Varint).uint64(message.bucketId);
        /* bytes id = 6; */
        if (message.id.length)
            writer.tag(6, WireType.LengthDelimited).bytes(message.id);
        /* uint64 offset = 7; */
        if (message.offset !== 0)
            writer.tag(7, WireType.Varint).uint64(message.offset);
        /* uint64 size = 8; */
        if (message.size !== 0)
            writer.tag(8, WireType.Varint).uint64(message.size);
        /* uint64 timestamp = 9; */
        if (message.timestamp !== 0)
            writer.tag(9, WireType.Varint).uint64(message.timestamp);
        /* common.Signature signature = 10; */
        if (message.signature)
            Signature.internalBinaryWrite(message.signature, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message activity_report.ActivityRequest
 */
export const ActivityRequest = new ActivityRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityAcknowledgment$Type extends MessageType<ActivityAcknowledgment> {
    constructor() {
        super("activity_report.ActivityAcknowledgment", [
            { no: 1, name: "requestId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "bytesStoredOrDelivered", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 3, name: "timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "signature", kind: "message", T: () => Signature }
        ]);
    }
    create(value?: PartialMessage<ActivityAcknowledgment>): ActivityAcknowledgment {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.requestId = "";
        message.bytesStoredOrDelivered = 0;
        message.timestamp = 0;
        if (value !== undefined)
            reflectionMergePartial<ActivityAcknowledgment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityAcknowledgment): ActivityAcknowledgment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string requestId */ 1:
                    message.requestId = reader.string();
                    break;
                case /* uint64 bytesStoredOrDelivered */ 2:
                    message.bytesStoredOrDelivered = reader.uint64().toNumber();
                    break;
                case /* uint64 timestamp */ 3:
                    message.timestamp = reader.uint64().toNumber();
                    break;
                case /* common.Signature signature */ 4:
                    message.signature = Signature.internalBinaryRead(reader, reader.uint32(), options, message.signature);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityAcknowledgment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string requestId = 1; */
        if (message.requestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.requestId);
        /* uint64 bytesStoredOrDelivered = 2; */
        if (message.bytesStoredOrDelivered !== 0)
            writer.tag(2, WireType.Varint).uint64(message.bytesStoredOrDelivered);
        /* uint64 timestamp = 3; */
        if (message.timestamp !== 0)
            writer.tag(3, WireType.Varint).uint64(message.timestamp);
        /* common.Signature signature = 4; */
        if (message.signature)
            Signature.internalBinaryWrite(message.signature, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message activity_report.ActivityAcknowledgment
 */
export const ActivityAcknowledgment = new ActivityAcknowledgment$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityFulfillment$Type extends MessageType<ActivityFulfillment> {
    constructor() {
        super("activity_report.ActivityFulfillment", [
            { no: 1, name: "request", kind: "message", T: () => ActivityRequest },
            { no: 2, name: "ack", kind: "message", T: () => ActivityAcknowledgment }
        ]);
    }
    create(value?: PartialMessage<ActivityFulfillment>): ActivityFulfillment {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ActivityFulfillment>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActivityFulfillment): ActivityFulfillment {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* activity_report.ActivityRequest request */ 1:
                    message.request = ActivityRequest.internalBinaryRead(reader, reader.uint32(), options, message.request);
                    break;
                case /* optional activity_report.ActivityAcknowledgment ack */ 2:
                    message.ack = ActivityAcknowledgment.internalBinaryRead(reader, reader.uint32(), options, message.ack);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ActivityFulfillment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* activity_report.ActivityRequest request = 1; */
        if (message.request)
            ActivityRequest.internalBinaryWrite(message.request, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional activity_report.ActivityAcknowledgment ack = 2; */
        if (message.ack)
            ActivityAcknowledgment.internalBinaryWrite(message.ack, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message activity_report.ActivityFulfillment
 */
export const ActivityFulfillment = new ActivityFulfillment$Type();
